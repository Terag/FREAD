/*
Boost Software License - Version 1.0 - August 17th, 2003
 * Modified by Victor Rouquette - January 2017

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 */

/* 
 * File:   FCore.cpp
 * Author: guillem
 *
 * Created on 27 janvier 2017, 11:47
 */

#include "Core/FCore.hpp"

FCore::FCore(){

}

FCore::FCore(   std::shared_ptr< FQueue< std::shared_ptr< FMessages > > > _pop_queue_parser, 
                std::shared_ptr< FQueue< std::shared_ptr< FMessages > > > _push_queue_parser,
                std::shared_ptr< FQueue< std::shared_ptr< FMessages > > > _pop_queue_render,
                std::shared_ptr< FQueue< std::shared_ptr< FMessages > > > _push_queue_render
             ):
              _m_pop_queue_parser(_pop_queue_parser),
              _m_push_queue_parser(_push_queue_parser),
              _m_pop_queue_render(_pop_queue_render),
              _m_push_queue_render(_push_queue_render),
              awake(true)
              {

              }

FCore::~FCore(){

}

/*
 * Thread that will manage  
 * the part of the memory 
 * containing the containers
 */

void FCore::thr_timestamps_manager(){
    std::cout << "in thr_timestamps_manager" << std::endl;
    while(1){
        if(!m_render_timestamps.empty()){
            auto msg_render =  *(m_render_timestamps.try_pop()) ;
            std::cout << "COUNT timestamps from render" << msg_render.use_count() << std::endl;
            patternStruct received = *( std::static_pointer_cast<patternStruct>(msg_render->getContent() ) );

            float beginTime = received.tBegin;
            float endTime = received.tEnd;

            if( m_containers.at( received.contId )->contains( received ) ){ //is in memory
                if(isContainerFull(received.contId, beginTime, endTime)){
                    patternStruct pattern_send = {received.id, received.contId, beginTime, endTime};
                    std::shared_ptr<void> content_send = std::static_pointer_cast<void>( std::make_shared<patternStruct>(pattern_send) );
                    FMessages msg_send(TIMESTAMP, content_send); 
                    _m_push_queue_render->push( std::make_shared< FMessages >(msg_send) );
                }else{
                    float endTimeLoaded = getContainerContent( received.contId, beginTime );
                    patternStruct pattern_send = {received.id, received.contId, beginTime, endTimeLoaded};
                    std::shared_ptr<void> content_send = std::static_pointer_cast<void>( std::make_shared<patternStruct>(pattern_send) );
                    FMessages msg_send(TIMESTAMP, content_send); 
                    _m_push_queue_render->push( std::make_shared< FMessages >(msg_send) );              
                }


            }else{ // is not in memory 
                _m_push_queue_parser->push( msg_render );
            }
        }

        
        if(!m_parser_timestamps.empty()){

            auto msg_parser = *(m_parser_timestamps.try_pop() );
            std::cout << "COUNT timestamps from parser" << msg_parser.use_count() << std::endl;

            patternStruct received = *( std::static_pointer_cast<patternStruct>(msg_parser->getContent() ) );

            m_containers.at( received.contId )->add_pattern( received );

            float beginTime = received.tBegin;
            float endTime = received.tEnd;

            if(isContainerFull(received.contId, beginTime, endTime)){
                patternStruct pattern_send = {received.id, received.contId, beginTime, endTime};
                std::shared_ptr<void> content_send = std::static_pointer_cast<void>( std::make_shared<patternStruct>(pattern_send) );
                FMessages msg_send(TIMESTAMP, content_send); 
                _m_push_queue_render->push( std::make_shared< FMessages >(msg_send) );
            }else{
                float endTimeLoaded = getContainerContent( received.contId, beginTime );
                patternStruct pattern_send = {received.id, received.contId, beginTime, endTimeLoaded};
                std::shared_ptr<void> content_send = std::static_pointer_cast<void>( std::make_shared<patternStruct>(pattern_send) );
                FMessages msg_send(TIMESTAMP, content_send); 
                _m_push_queue_render->push( std::make_shared< FMessages >(msg_send) );
            }
        }
    }  
}


/*
 * Thread that will manage  
 * the part of the memory 
 * containing the occurrences
 */
void FCore::thr_occurrences_manager(){
    std::cout << "in thr_occurrences_manager" << std::endl;
    while(1){
        if(!m_render_occurrences.empty()){
            auto msg_render = *(m_render_occurrences.try_pop());
            std::cout << "COUNT occurrences from render" << msg_render.use_count() << std::endl;
            std::pair<int, int> received = *( std::static_pointer_cast< std::pair<int, int> >(msg_render->getContent() ) );
                if( m_occurrences.contains( received.first 
                                        && m_occurrences.at( received.first )->contains( received.second ) ) 
                                      ){ /* is in memory */
                std::shared_ptr<FOccurrence> occurrence_send = m_occurrences.at( received.first )->at( received.second );
                std::shared_ptr<void> content_send = std::static_pointer_cast<void>( occurrence_send );
                FMessages msg_send(OCCURRENCE, content_send);
                _m_push_queue_render->push( std::make_shared<FMessages>(msg_send) );
            }else{ /* is not in memory */
                _m_push_queue_parser->push( msg_render );
            }
        }

        
        if(!m_parser_occurrences.empty()){
            std::shared_ptr< FMessages > msg_parser = *(m_parser_occurrences.try_pop() );
            std::cout << "COUNT occurrences from parser" << msg_parser.use_count() << std::endl;

            std::shared_ptr<FOccurrence> received = std::static_pointer_cast< FOccurrence >(msg_parser->getContent() ) ;
            std::pair<int, int> key = std::make_pair( received->getPatternId(), received->getId() );
            std::pair<int, std::shared_ptr<FOccurrence> > my_pair = std::make_pair(key.second, received);
            m_occurrences.at(key.first)->insert( my_pair );
            _m_push_queue_render->push(msg_parser);
        }
    }
}


void FCore::thr_messages_handler_parser(){
    std::cout << "in message_handler_parser" << std::endl;
    while(1){
        std::shared_ptr<FMessages> msg = *(_m_pop_queue_parser->wait_and_pop());
        if(msg != NULL){
            switch(msg->getHeader()){
                case(START):
                {
                    std::cout << "START MESSAGE RECEIVED" << std::endl;
                    break;
                }
                case(INITDONE):
                {
                    std::cout << "INITDONE MESSAGE RECEIVED" << std::endl;
                    break;
                }
                case(CONTAINER):
                {
                    std::cout << "CONTAINER MESSAGE RECEIVED" << std::endl;
                    std::shared_ptr<FContainer> received = std::static_pointer_cast<FContainer>(msg->getContent());
                    std::pair<int, std::shared_ptr<FContainer> > my_pair(received->getId() , received);
                    m_containers.insert( my_pair );
                    std::cout << "M_CONTAINERS SIZE IS NOW : " << m_containers.size() << std::endl;
                    break;
                }
                case(PATTERN):
                {
                    std::cout << "PATTERN MESSAGE RECEIVED" << std::endl;
                    std::shared_ptr<FPattern> received = std::static_pointer_cast<FPattern>(msg->getContent());
                    std::pair<int, std::shared_ptr<FPattern> > my_pair(received->getId() , received);
                    m_patterns.insert( my_pair );
                    std::cout << "M_PATTERNS SIZE IS NOW : " << m_patterns.size() << std::endl;
                    break;
                }
                case(TIMESTAMP):
                {
                    std::cout << "TIMESTAMP MESSAGE RECEIVED" << std::endl;
                    m_parser_timestamps.push( msg );
                    break;
                }
                case(OCCURRENCE):
                {
                    std::cout << "OCCURRENCE MESSAGE RECEIVED" << std::endl;
                    m_parser_occurrences.push( msg );
                    break;
                }
                default:

                break;
            }
        }    
    }
}

void FCore::thr_messages_handler_render(){
    std::cout << "in thr_messages_handler_render" << std::endl;
    while(1){
        std::shared_ptr<FMessages> msg = *(_m_pop_queue_render->wait_and_pop());
        if(msg != NULL){
            switch(msg->getHeader()){
                case(START):
                {
                    awake = false;
                break;
                }
                case(INITDONE):
                {
                    break;
                }
                case(CONTAINER):
                {

                    break;
                }
                case(PATTERN):
                {

                    break;
                }
                case(TIMESTAMP):
                {
                    m_render_timestamps.push( msg );
                    break;
                }
                case(OCCURRENCE):
                {
                    m_render_occurrences.push( msg );
                    break;
                }
                default:

                break;
            }
        }
    }   
}




void  FCore::thr_check_memory(){
    if(m_occurrences.size() > MAX_SIZE){
        !m_occurrences.erase();
    }
}

    
void FCore::thr_FCore(){
    
    std::cout << "start message_handler_parser_" << std::endl;
    std::thread message_handler_parser_( [this]{thr_messages_handler_parser();} );
    FThread_guard mhpp_g( message_handler_parser_ );

    std::cout << "start timestamps_manager_" << std::endl;
    std::thread timestamps_manager_( [this]{thr_timestamps_manager();} );
    FThread_guard tm_g(timestamps_manager_);

    std::cout << "start occurrences_manager_" << std::endl;
    std::thread occurrences_manager_( [this]{thr_occurrences_manager();} );
    FThread_guard om_g(occurrences_manager_);

    std::cout << "start message_handler_render_" << std::endl;
    std::thread message_handler_render_( [this]{thr_messages_handler_render();} );
    FThread_guard mhpr_g( message_handler_render_ );
/*
    while(awake){
            
    } 
   */ 
    std::cout << "AWAKE DONE" <<std::endl;

    std::cout << "start check_memory_" << std::endl;
    std::thread check_memory_( [this]{thr_check_memory();} );
    FThread_guard mem_g( check_memory_ );
}

/*
static std::vector<std::shared_ptr<FContainer> > view_containers(int a, int b){
    std::vector<std::shared_ptr<FContainer> > result;
    for(int i = a; i <= b; ++i){
        result.push_back( FCore::m_containers[i] );
    }
    return result;
}

static std::shared_ptr<FPattern>  view_patterns(int a){
    return FCore::m_patterns[a];
}
*/

void FCore::start(){
    std::cout << "start FCore" << std::endl;

    std::thread fCore_( [this]{thr_FCore();} );
    fCore_.detach();

    //FThread_guard fc_g( fCore_ );
}


float FCore::getContainerContent(int id, float t1){
    bool isContinue = false;
    for(auto it = m_containers.at(id)->getPatternList().begin(); it != m_containers.at(id)->getPatternList().end(); ++it ){
        if( it->tBegin >= t1 ){
            auto it_tmp = it;
            ++it_tmp;
            if(it->tEnd <= it_tmp->tBegin + 0.01 || it->tEnd >= it_tmp->tBegin - 0.01){
                isContinue = true;
            }else{
                isContinue = false;
            }

            if(!isContinue){
                return it->tEnd;
            }
        }
    }

    return m_containers.at(id)->getPatternList().end()->tEnd;
}

bool FCore::isContainerFull(int id, float t1, float t2){
    bool isContinue = false;
    for(auto it = m_containers.at(id)->getPatternList().begin(); it != m_containers.at(id)->getPatternList().end(); ++it ){
        if( it->tBegin >= t1 ){
            auto it_tmp = it;
            ++it_tmp;
            if(it->tEnd <= it_tmp->tBegin + 0.01 || it->tEnd >= it_tmp->tBegin - 0.01){
                isContinue = true;
            }else{
                isContinue = false;
            }

            if(isContinue && it->tEnd >t2 ){
                return true;
            }
        }

        if( it->tBegin > t1 && it->tEnd > t2 ){
            return false;
        }
    }

    return false;
}