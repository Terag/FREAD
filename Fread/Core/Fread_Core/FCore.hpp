/*
Boost Software License - Version 1.0 - August 17th, 2003
 * Modified by Victor Rouquette - January 2017

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 */

/* 
 * File:   FCore.hpp
 * Author: guillem
 *
 * Created on 24 janvier 2017, 15:38
 */

#ifndef FCORE_HPP
#define FCORE_HPP

#define MAX_SIZE 200

#include <vector>

#include <thread>
#include <mutex>
#include <condition_variable>

#include "FQueue.hpp"
#include "FThread_guard.hpp"
#include "threadsafe_list.h"
#include "threadsafe_hashmap.h"
#include "FMessages.hpp"


class FCore {
public:
    FCore( std::shared_ptr<FQueue<msg_parser> > _pop_queue_parser, 
           std::shared_ptr<FQueue<msg_parser> > _push_queue_parser,
           std::shared_ptr<FQueue<msg_renderer> > _pop_queue_renderer,
           std::shared_ptr<FQueue<msg_renderer> > _push_queue_renderer
           );
    
    FCore(const Core& orig);
    
    virtual ~FCore();
    
    void thr_FCore();
    
    
private:
    bool awake; //is in awake phase
    
    std::shared_ptr<FQueue< FMessages<> > > _m_pop_queue_parser;
    std::shared_ptr<FQueue< FMessages<> > > _m_push_queue_parser;
    std::shared_ptr<FQueue< FMessages<> > > _m_pop_queue_renderer;
    std::shared_ptr<FQueue< FMessages<> > > _m_push_queue_renderer;
     
    /*
     TODO
     */
    FQueue< FMessages<> > m_renderer_occurrences;
    FQueue< FMessages<> > m_renderer_containers;
    FQueue< FMessages<> > m_occurrences_renderer;
    FQueue< FMessages<> > m_containers_renderer;
    
    FQueue< FMessages<> > m_parser_occurrences;
    FQueue< FMessages<> > m_parser_containers;
    FQueue< FMessages<> > m_occurrences_parser;
    FQueue< FMessages<> > m_containers_parser;
    
    /*
     TODO
     */
    threadsafe_hashmap<std::pair<int, int>, std::shared_ptr<> > m_occurrences;
    threadsafe_hashmap<int, std::shared_ptr<> > m_containers;
    threadsafe_hashmap<int, std::shared_ptr<> > m_patterns;
    
    void thr_container_manager();
    void thr_occurrences_manager();
    
    void thr_message_handler_parser();
    void thr_message_handler_renderer();
    
    std::mutex containers_manager_mutex;
    std::condition_variable containers_manager_cond;
    std::mutex occurrences_manager_mutex;
    std::condition_variable occurrences_manager_cond;
    
    std::mutex message_parser_mutex;
    std::condition_variable message_parser_cond;
    std::mutex message_renderer_mutex;
    std::condition_variable message_renderer_cond;
    
    //check_memory ensure that the two map are not too big
    void check_memory();
};

    FCore::FCore( std::shared_ptr<FQueue<FMessages> > _pop_queue_parser, 
                  std::shared_ptr<FQueue<FMessages> > _push_queue_parser,
                  std::shared_ptr<FQueue<FMessages> > _pop_queue_renderer,
                  std::shared_ptr<FQueue<FMessages> > _push_queue_renderer):
                  _m_pop_queue_parser(_pop_queue_parser),
                  _m_push_queue_parser(_push_queue_parser),
                  _m_pop_queue_renderer(_pop_queue_renderer),
                  _m_push_queue_renderer(_push_queue_renderer)      
    { 
        _m_pop_queue_parser->setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                                std::make_shared<std::condition_variable>(message_parser_cond) );
        m_containers_parser.setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                               std::make_shared<std::condition_variable>(message_parser_cond) );
        m_occurrences_parser.setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                                std::make_shared<std::condition_variable>(message_parser_cond) );
        
        _m_pop_queue_renderer->setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                                  std::make_shared<std::condition_variable>(message_renderer_cond) );
        m_containers_renderer.setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                                 std::make_shared<std::condition_variable>(message_renderer_cond) );
        m_occurrences_renderer.setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                                  std::make_shared<std::condition_variable>(message_renderer_cond) );
        
        m_renderer_containers.setOtherCondition( std::shared_ptr<std::mutex>(containers_manager_mutex), 
                                                 std::shared_ptr<std::condition_variable>(containers_manager_cond) );
        m_parser_containers.setOtherCondition( std::shared_ptr<std::mutex>(containers_manager_mutex), 
                                               std::shared_ptr<std::condition_variable>(containers_manager_cond) );
        
        m_renderer_occurrences.setOtherCondition( std::shared_ptr<std::mutex>(occurrences_manager_mutex), 
                                                  std::shared_ptr<std::condition_variable>(occurrences_manager_cond) );
        m_parser_containers.setOtherCondition( std::shared_ptr<std::mutex>(occurrences_manager_mutex), 
                                               std::shared_ptr<std::condition_variable>(occurrences_manager_cond) );
    
    }

    void FCore::thr_container_manager(){
    msg_renderer renderer_message_received;
    msg_parser parser_message_received;
    /*
    while(1){
        //gets messages from display and parser
        if(!m_renderer_containers.empty()){
            renderer_message_received = m_renderer_containers.pop_back();
        }
        if( !m_parser_containers->empty() ){
            parser_message_received = m_parser_containers->pop_back();
        }
        
        //checks if in memory

        //if in memory, get it and sends it to the container
        if(m_containers.contains(renderer_message_received.content)){
            s_threads result = m_containers.at(renderer_message_received.content); //here it is a get by id
            msg_renderer message = {CONTAINER, std::make_shared<result>()};
            m_containers_renderer.push_back(message);
        //if not in memory, sends to the parser    
        }else{
            s_threads result = m_containers.at(renderer_message_received.content);
            msg_parser message = {result};
            m_containers_parser.push_back(message);
        }
        
        
        //sends the message got from parser and puts it in memory
        s_threads result = parser_message_received.content;
        msg_renderer message = {CONTAINER, std::make_shared<result>()};
        m_containers_renderer.push_back(message);
            
        m_containers.insert(result.id, result); //get an id here
        
    }
    */
}
    
    
void FCore::thr_message_handler_parser(){
        
    //The message handler wait for messages from the parser, the occurrences thread or the containers thread
    std::unique_lock<std::mutex> lock(message_parser_mutex);
    message_parser_cond.wait(lock, [this](){ 
                                            return !(_m_pop_queue_parser->empty() 
                                                     || m_parser_occurrences.empty() 
                                                     || m_parser_containers.empty());
                                           } 
                            );
    lock.unlock();

    
    //Messages received from parser
    std::shared_ptr<msg_parser> msg = _m_pop_queue_parser->try_pop();
    if(msg != NULL){
            
        switch(msg->header){
            case(INITDONE):
                awake = false;
            break;
            case(CONTAINER):
                m_parser_containers.push_back(msg->content);
            break;
            case(PATTERN):
                //insert the pattern in m_patterns
            break;
            case(OCCURRENCE):
                m_parser_containers.push_back(msg->content);
            break;
        } 
            
    }
        
}
    
void  FCore::check_memory(){
    if(m_occurrences.size() > MAX_SIZE){
        m_occurrences.erase( m_occurrences.begin() );
    }
   
    if(m_containers.size() > MAX_SIZE){
        m_containers.erase( m_containers.begin() );   
    }
}

    
void FCore::thr_FCore(){
        
    std::thread message_handler_parser_( thr_message_handler_parser() );
    FThread_guard mhp_g( message_handler_parser_ );
        
    std::thread container_manager_( thr_container_manager() );
    FThread_guard cm_g(container_manager_);
        
    std::thread occurrences_manager_( thr_occurrences_manager() );
    FThread_guard om_g(occurrences_manager_);
        
    while(awake){
            
    }
        
        
    std::thread message_handler_renderer_( thr_message_handler_renderer() );
    FThread_guard mhp_g( message_handler_renderer_ );
    
    while(1){
        check_memory();
    } 
}
#endif /* FCORE_HPP */

