/*
Boost Software License - Version 1.0 - August 17th, 2003
 * Modified by Victor Rouquette - January 2017

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 */

/* 
 * File:   FCore.cpp
 * Author: guillem
 *
 * Created on 27 janvier 2017, 11:47
 */

#include "FCore.hpp"
#include "FMessages_structure.hpp"

FCore::FCore( std::shared_ptr< FQueue<FMessages> > _pop_queue_parser, 
              std::shared_ptr< FQueue<FMessages> > _push_queue_parser,
              std::shared_ptr< FQueue<FMessages> > _pop_queue_renderer,
              std::shared_ptr< FQueue<FMessages> > _push_queue_renderer):
              _m_pop_queue_parser(_pop_queue_parser),
              _m_push_queue_parser(_push_queue_parser),
              _m_pop_queue_renderer(_pop_queue_renderer),
              _m_push_queue_renderer(_push_queue_renderer)      
{ 
    _m_pop_queue_parser->setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                            std::make_shared<std::condition_variable>(message_parser_cond) );
    m_containers_parser.setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                           std::make_shared<std::condition_variable>(message_parser_cond) );
    m_occurrences_parser.setOtherCondition( std::shared_ptr<std::mutex>(message_parser_mutex),
                                            std::make_shared<std::condition_variable>(message_parser_cond) );
    
    _m_pop_queue_renderer->setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                              std::make_shared<std::condition_variable>(message_renderer_cond) );
    m_containers_renderer.setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                             std::make_shared<std::condition_variable>(message_renderer_cond) );
    m_occurrences_renderer.setOtherCondition( std::shared_ptr<std::mutex>(message_renderer_mutex),
                                              std::make_shared<std::condition_variable>(message_renderer_cond) );
   
    m_renderer_containers.setOtherCondition( std::shared_ptr<std::mutex>(containers_manager_mutex), 
                                             std::shared_ptr<std::condition_variable>(containers_manager_cond) );
    m_parser_containers.setOtherCondition( std::shared_ptr<std::mutex>(containers_manager_mutex), 
                                           std::shared_ptr<std::condition_variable>(containers_manager_cond) );
   
    m_renderer_occurrences.setOtherCondition( std::shared_ptr<std::mutex>(occurrences_manager_mutex), 
                                              std::shared_ptr<std::condition_variable>(occurrences_manager_cond) );
    m_parser_containers.setOtherCondition( std::shared_ptr<std::mutex>(occurrences_manager_mutex), 
                                           std::shared_ptr<std::condition_variable>(occurrences_manager_cond) );
    
}

void FCore::thr_container_manager(){
    msg_renderer renderer_message_received;
    msg_parser parser_message_received;
    /*
    while(1){
        //gets messages from display and parser
        if(!m_renderer_containers.empty()){
            renderer_message_received = m_renderer_containers.pop_back();
        }
        if( !m_parser_containers->empty() ){
            parser_message_received = m_parser_containers->pop_back();
        }
        
        //checks if in memory

        //if in memory, get it and sends it to the container
        if(m_containers.contains(renderer_message_received.content)){
            s_threads result = m_containers.at(renderer_message_received.content); //here it is a get by id
            msg_renderer message = {CONTAINER, std::make_shared<result>()};
            m_containers_renderer.push_back(message);
        //if not in memory, sends to the parser    
        }else{
            s_threads result = m_containers.at(renderer_message_received.content);
            msg_parser message = {result};
            m_containers_parser.push_back(message);
        }
        
        
        //sends the message got from parser and puts it in memory
        s_threads result = parser_message_received.content;
        msg_renderer message = {CONTAINER, std::make_shared<result>()};
        m_containers_renderer.push_back(message);
            
        m_containers.insert(result.id, result); //get an id here
        
    }
    */
}
    
    
void FCore::thr_message_handler_parser(){
        
    //The message handler wait for messages from the parser, the occurrences thread or the containers thread
    std::unique_lock<std::mutex> lock(message_parser_mutex);
    message_parser_cond.wait(lock, [this](){ 
                                            return !(_m_pop_queue_parser->empty() 
                                                     || m_occurrences_parser.empty() 
                                                     || m_containers_parser.empty());
                                           } 
                            );
    lock.unlock();

    if( !_m_pop_queue_parser->empty() ){ //Messages received from parser
        FMessages msg = _m_pop_queue_parser->try_pop();
        if(msg != NULL){
            switch(msg->getHeader){
                case(INITDONE):
                    awake = false;
                break;
                case(CONTAINER):
                    //send the container to the containers manager
                    FMessages msg_send(CONTAINER, msg.getContent() );
                    m_parser_containers.push(msg_send);
                break;
                case(PATTERN):
                    //insert the pattern in m_patterns
                break;
                case(OCCURRENCE):
                    //send the occurrence to the occurrences manager
                    FMessages msg_send(OCCURRENCE, msg.getContent() );
                    m_parser_containers.push(msg_send);
                break;
                default:
                    std::cout << "error : bad header" << std::endl;
                break;
            } 
        }
        
    }else if( !m_containers_parser.empty() ){ //Messages received from Containers thread
        FMessages msg = m_containers_parser.try_pop();
        if(msg != NULL){
            if(msg.getHeader == CONTAINER){
                /*
                 TODO
                 */
                    //it might need a conversion
                    FMessages msg_send( CONTAINER, msg.getContent() );
                    _m_push_queue_parser->push( msg_send );
            }else{
                std::cout << "error : bad header" << std::endl;
            }
        }
        
    }else if ( !m_occurrences_parser.empty() ){ // Messages received from Occurrences thread
        FMessages msg = m_containers_parser.try_pop();
        if(msg != NULL){
            if(msg.getHeader == OCCURRENCE){
                /*
                 TODO
                 */
                //it might need a conversion
                FMessages msg_send( OCCURRENCE, msg.getContent() );
                _m_push_queue_parser->push( msg_send );
            }else{
                std::cout << "error : bad header" << std::endl;
            }
        } 
    }
}
    
void  FCore::check_memory(){
    if(m_occurrences.size() > MAX_SIZE){
        m_occurrences.erase( m_occurrences.begin() );
    }
   
    if(m_containers.size() > MAX_SIZE){
        m_containers.erase( m_containers.begin() );   
    }
}

    
void FCore::thr_FCore(){
        
    std::thread message_handler_parser_( thr_message_handler_parser() );
    FThread_guard mhp_g( message_handler_parser_ );
        
    std::thread container_manager_( thr_container_manager() );
    FThread_guard cm_g(container_manager_);
        
    std::thread occurrences_manager_( thr_occurrences_manager() );
    FThread_guard om_g(occurrences_manager_);
        
    while(awake){
            
    }
        
        
    std::thread message_handler_renderer_( thr_message_handler_renderer() );
    FThread_guard mhp_g( message_handler_renderer_ );
    
    while(1){
        check_memory();
    } 
}
